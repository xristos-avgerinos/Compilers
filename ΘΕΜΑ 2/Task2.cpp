#include <iostream>
#include <random>
#include <algorithm>
#include <ctime>
using namespace std;
int main() {
    string ekfrasi,result;
    int counter,limit;
    string rule_for_A[] = {"v", "<E>"};
    string rule_for_B[] = {"-<Y>", "+<Y>", ""};
    ekfrasi = "<E> ";//Η εκφραση ξεκιναει με το συμβολο <E>
    cout << ekfrasi + "-->" <<endl;
    counter = 0;
    limit = 20;//αρχικοποιηση της μεταβλητης limit με 20.Δηλαδη μπορουν να εφαρμοστουν μεχρι 20 συντακτικοι κανονες τυχαια.Ο αριθμος 20 ειναι συμβολικος δηλαδη μπορει να ειναι οποισδηποτε θετικος ακεραιος αριθμος
    srand((unsigned int)time(NULL));//δινει τυχαιοτητα στους κανονες αντικαταστασης των συμβολων(αναλογα με την τρεχουσα ωρα).
    while (ekfrasi.find('>') != 4294967295){
        //Τρεχουμε ενα loop μεχρι να μην υπαρχει πλεον το συμβολο ">" δηλαδη μεχρι να υπαρχουν μονο τερματικα συμβολα στην γεννητρια συμβολοσειρα.Ετσι θα ξερουμε οτι η γεννητρια συμβολοσειρα θα εχει φτασει στο τελος της.Η συναρτηση find επιστρεφει τον δεικτη στον οποιο βρεθηκε η πρωτη εμφανιση
        //του συμβολου που της δινουμε(στη συγκεκριμενη περιπτωση το ">").Αμα δεν βρεθει τοτε επιστρεφει τον αριθμο 4294967295.Οποτε οσο η συμβολοσειρα ekfrasi δεν επιστρεφει τον αριθμο αυτο σημαινει οτι περιεχει ακομα μη τερματικα συμβολα.

        while (ekfrasi.find("<E>") != 4294967295){//τρεχουμε ενα while loop μεχρι να γινουν ολες οι αντικαταστασεις του μη τερματικου συμβολου <E> με "(<Y>)"
            ekfrasi.replace(ekfrasi.find("<E>"),3,"(<Y>)");
            cout << ekfrasi + "-->" + string( 60-ekfrasi.length(), ' ' ) + "rule <E>::=(<Y>) was applied." << endl;
            counter++;
        }
        while (ekfrasi.find("<Y>") != 4294967295){//τρεχουμε ενα while loop μεχρι να γινουν ολες οι αντικαταστασεις του μη τερματικου συμβολου <Y> με "<A><B>"
            ekfrasi.replace(ekfrasi.find("<Y>"),3,"<A><B>");
            cout << ekfrasi + "-->" + string( 60-ekfrasi.length(), ' ' ) +  "rule <Y>::=<A><B> was applied." << endl;
            counter++;
        }
        while (ekfrasi.find("<A>") != 4294967295){//τρεχουμε ενα while loop μεχρι να γινουν ολες οι αντικαταστασεις του μη τερματικου συμβολου <A> με "v" ή "<E>"
            if (counter < limit) {
                //Αν δεν εχουν ακομα εμαρμοστει 20 συντακτικοι κανονες αντικαταστασης κανουμε αντικατασταση του συμβολου <A> με το "v" ή το "<E>" στην συμβολοσειρα ekfrasi (επιλεγοντας τυχαια ενα απο τα δυο μεσω της συναρτησης rand).
                result = rule_for_A[rand() % 2];
                ekfrasi.replace(ekfrasi.find("<A>"), 3, result);
            }
            else{
                //Διαφορετικα αν εχουν εφαρμοστει 20 οι περισσοτεροι συντακτικοι κανονες αντικαταστασης κανουμε αντικατασταση του συμβολου <A> με το "v" στην συμβολοσειρα ekfrasi (επιλεγοντας εσκεμμενα το πρωτο κανονα αντικαταστασης του συμβολου <A> ωστε να τερματισει η διαδικασια καποια στιγμη).
                result = rule_for_A[0];
                ekfrasi.replace(ekfrasi.find("<A>"), 3, result);
            }
            cout << ekfrasi + "-->" + string( 60-ekfrasi.length(), ' ' ) +  "rule <A>::=" + result + " was applied." << endl;
            counter++;
        }
        while (ekfrasi.find("<B>") != 4294967295){//τρεχουμε ενα while loop μεχρι να γινουν ολες οι αντικαταστασεις του μη τερματικου συμβολου <B> με "-<Y>" ή "+<Y>" ή "ε" δηλαδη το κενο
            if (counter < limit) {
                //Αν δεν εχουν ακομα εμαρμοστει 20 συντακτικοι κανονες αντικαταστασης κανουμε αντικατασταση του συμβολου <B> με το "-<Y>" ή το "+<Y>" ή το "ε" στην συμβολοσειρα ekfrasi (επιλεγοντας τυχαια ενα απο τα τρια μεσω της συναρτησης rand).
                result = rule_for_B[rand() % 3];
                ekfrasi.replace(ekfrasi.find("<B>"), 3, result);
            }
            else{
                //Διαφορετικα αν εχουν εφαρμοστει 20 οι περισσοτεροι συντακτικοι κανονες αντικαταστασης κανουμε αντικατασταση του συμβολου <B> με το "ε" δηλ ενα κενο ("") στην συμβολοσειρα ekfrasi ( επιλεγοντας εσκεμμενα τον τριτο κανονα αντικαταστασης του συμβολου <B> ωστε να τερματισει η διαδικασια καποια στιγμη).
                result = rule_for_B[2];
                ekfrasi.replace(ekfrasi.find("<B>"), 3, result);
            }

            if(result.length()==0)//Αν το μηκος της μεταβλτης result ειναι μηδεν σημαινει οτι εφαρμοστηκε ο τριτος κανονας αντικαταστασης του συμβολου <B> δηλαδη με το κενο "ε"
                result = "epsilon";//επειδη ομως δεν μπορεσαμε να συμπεριλαβουμε ελληνικους χαρακτηρες οπως το "ε" χρησιμοποιησαμε τον αγγλικο ορο "epsilon"

            if (ekfrasi.find('>') != 4294967295){
                //Αν υπαρχουν ακομα μη τερματικα συμβολα εμφανιζουμε τη σειμολοσειρα με το βελακι "-->"
                cout << ekfrasi + "-->" + string( 60-ekfrasi.length(), ' ' ) + "rule <B>::=" + result + " was applied." << endl;
            }
            else{
                //Διαφορετικα εμφανιζουμε τη σειμβολοσειρα χωρις το βελακι "-->"..
                cout << ekfrasi + string( 60+3-ekfrasi.length(), ' ' ) + "rule <B>::=" + result + " was applied." << endl;
            }
            counter++;
        }
    }

    return 0;
}